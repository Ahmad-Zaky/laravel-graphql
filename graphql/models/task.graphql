type Task {
  id: ID!
  title: String!
  description: String
  user: User! @belongsTo
  created_at: String!
  updated_at: String!
}

extend type Query {
    task(id: ID @eq): Task @find
    tasks(
      title: String @where(operator: "like")
      description: String @where(operator: "like")
    ): [Task!]! @paginate @orderBy(column: "created_at", direction: DESC) @whereAuth(relation: "user")
}

extend type Mutation {
  createTask(input: CreateInput! @spread): Task @create @inject(context: "user.id", name: "user_id")
  updateTask(input: UpdateInput! @spread): Task @update @whereAuth(relation: "user")
  deleteTask(id: ID!): Task @delete @whereAuth(relation: "user")
}

input CreateInput {
  user_id: Int!
  title: String! @rules(apply: ["required", "string", "min:3"])
  description: String @rules(apply: ["string", "min:3"])
}

input UpdateInput {
  id: ID!
  title: String! @rules(apply: ["required", "string", "min:3"])
  description: String @rules(apply: ["string", "min:3"])
}